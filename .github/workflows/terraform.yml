name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  create-template-vm:
    name: 🚀 Create Template VM Only
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Terraform Init
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform init

      - name: Apply template_vm only
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -auto-approve -target=azurerm_windows_virtual_machine.template_vm -var-file="terraform.tfvars"

  check-image:
    name: 🔍 Check if Image Exists
    runs-on: ubuntu-latest
    outputs:
      image_id: ${{ steps.check_image.outputs.image_id }}
    steps:
      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Check image existence
        id: check_image
        run: |
          IMAGE_ID=$(az image show --resource-group rg-vm-images --name custom-win-image --query id --output tsv || echo "")
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

  import-image-if-exists:
    name: 📦 Import Image in State (if exists)
    runs-on: ubuntu-latest
    needs: check-image
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4  

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Import image into state if exists
        run: |
          IMG_ID=$(az image show --resource-group rg-vm-images --name custom-win-image --query id -o tsv || echo "")
          if [ "$IMG_ID" != "" ]; then
            terraform init
            terraform import azurerm_image.custom_image "$IMG_ID"
          else
            echo "Image does not exist. Terraform will create it."
          fi

  apply-final:
    name: 🚀 Apply Final Infra (VMs)
    runs-on: ubuntu-latest
    needs: [check-image, import-image-if-exists]
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Terraform Init
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform init

      - name: Import RG if exists
        run: |
          RG_NAME="rg-vm-apps"
          RG_ID=$(az group show --name $RG_NAME --query id -o tsv || echo "")
          if [ ! -z "$RG_ID" ]; then
            if ! terraform state list | grep -q "azurerm_resource_group.rg"; then
              terraform import azurerm_resource_group.rg $RG_ID
            fi
          fi

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
        run: terraform apply -auto-approve -var-file="terraform.tfvars"
